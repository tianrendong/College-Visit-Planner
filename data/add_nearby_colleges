#!/usr/bin/python3

import sqlite3
import googlemaps 
gmaps = googlemaps.Client(key="AIzaSyBIJk5AqilYH8PHt2TP4f5d7QY-UxtJf58")  

MAX_DISTANCE = 80;
DISTANCE_LAT_RATIO = 69;
DISTANCE_LON_RATIO = 54.6;

con = sqlite3.connect("universities.sqlite3")
cur = con.cursor()
cur_update = con.cursor()

# cur.execute("ALTER TABLE colleges ADD nearby NULL;")

def find_distance(origin_latitude, origin_longitude, destination_latitude, destination_longitude):
	# Requires geo-coordinates(latitude/longitude) of origin and destination
	distance = gmaps.distance_matrix([str(origin_latitude) + " " + str(origin_longitude)], [str(destination_latitude) + " " + str(destination_longitude)], mode='walking')['rows'][0]['elements'][0]
	return(distance["distance"]["value"])

def sort_nearby_colleges(nearby_colleges): 
    # getting length of list of tuples
    length = len(nearby_colleges) 
    for i in range(0, length): 
        for j in range(0, length - i - 1): 
            if (nearby_colleges[j][2] > nearby_colleges[j + 1][2]): 
                temp = nearby_colleges[j] 
                nearby_colleges[j]= nearby_colleges[j + 1] 
                nearby_colleges[j + 1]= temp 
    return nearby_colleges 

for row in cur.execute("SELECT * FROM colleges;"):
	target_name = row[0]
	target_lat = row[1]
	target_lon = row[2]
	target_id = row[8]

	# Find bounding box
	latRatio = MAX_DISTANCE / DISTANCE_LAT_RATIO
	lonRatio = MAX_DISTANCE / DISTANCE_LON_RATIO
	nwLat = target_lat + latRatio
	nwLon = target_lon - lonRatio
	seLat = target_lat - latRatio
	seLon = target_lon + lonRatio
	lat_bound = "(latitude BETWEEN " + str(seLat) + " AND " + str(nwLat) + ")"
	lon_bound = "(longitude BETWEEN " + str(nwLon) + " AND " + str(seLon) + ")"
	ignore_same = "(id != " + str(target_id) + ");"

	print(target_name)
	nearby_colleges = []
	for r in cur_update.execute("SELECT id, name, latitude, longitude FROM colleges WHERE " + lat_bound + " AND " + lon_bound + " AND " + ignore_same):
		nearby_id = r[0]
		nearby_name = r[1]
		nearby_lat = r[2]
		nearby_lon = r[3]

		try:
			distance = find_distance(target_lat, target_lon, nearby_lat, nearby_lon)
			nearby_colleges.append((nearby_id, nearby_name, distance))
		except:
			print("ERRORED")
	
	nearby_colleges = sort_nearby_colleges(nearby_colleges)
	nearby_colleges_id = ""
	for i in nearby_colleges:
		nearby_colleges_id = nearby_colleges_id + str(i[0]) + ','
		cur_update.execute('''
			UPDATE colleges
            SET nearby = ?
            WHERE id = ?''', (nearby_colleges_id, target_id))
		print(i)
	print()

con.commit()